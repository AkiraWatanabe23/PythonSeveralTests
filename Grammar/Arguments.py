
####################
#引数(Argumant)の参照渡し、値渡しについて
#https://www.javadrive.jp/python/userfunc/index3.html

#値渡し...関数を呼び出す時に、仮引数に指定した値を「コピーして実引数に渡す」方法
#　　　   関数内で変数の値を変更しても、呼び出し元が参照している変数の値は変更されない
#参照渡し...関数を呼び出す時に、仮引数に指定した値が「保管されている場所の情報を実引数に渡す」方法
#　　　　   関数内で変数の値を変更した場合、呼び出し元が参照している変数の値も変更される
"""
pythonでは、引数を指定して関数を呼び出す時は、「参照渡し」が使用される

※str, int 等の一度作成すると変更できないイミュータブル(immutable)なオブジェクトを
引数に指定した場合と、
List, Dic 等の作成後に変更できるミュータブル(mutable)なオブジェクトを
引数に指定した場合とで挙動が異なる
"""

#変更できないイミュータブル(immutable)なオブジェクトを引数に指定した場合
def func_one(n):
    print(id(n)) #nに代入されたオブジェクトのIDを出力

def pass_by_value_like(n):
    print(n)
    n += 5 # <- 値の変更
    print(n)

a = 10
print(id(a)) # -> 140722845111368
func_one(a)  # -> 140722845111368
#↑同じオブジェクトを参照している

print(a)    # -> 10
pass_by_value_like(a) # -> 10
#             -> 15
print(a)    # -> 10 ... 呼び出し元の変数の値に変更がない
#上記のように、参照渡しでも値渡しのような挙動になる


#変更できるミュータブル(mutable)なオブジェクトを引数に指定した場合
def func_two(n):
    print(id(n))

def pass_by_refarence(n):
    print(n)
    n[0] += 5
    print(n)

a = [10, 20]
print(id(a)) # -> 2787859597696
func_two(a)  # -> 2787859597696
#↑同じオブジェクトを参照している

print(a)             # -> [10, 20]
pass_by_refarence(a) # -> [10, 20]
#                      -> [15, 20]
print(a)             # -> [15, 20] ... 呼び出し元の変数の値が変更されている
#上記のように、参照渡しの挙動をする
####################

####################
#位置引数、キーワード引数とは
#https://www.javadrive.jp/python/userfunc/index6.html

#関数を呼び出すときにその関数に引数がある場合、「位置引数」「キーワード引数」という記述方法がある
def positional_arg(arg1, arg2):
    print(f"引数1 : {arg1}, 引数2 : {arg2}")

def keyword_arg(arg1, arg2):
    print(f"引数1 : {arg1}, 引数2 : {arg2}")

#位置引数を用いた方法
positional_arg(10, 'aaa')         # -> 引数1 : 10, 引数2 : aaa
#キーワード引数を用いた方法
keyword_arg(arg1='test', arg2=39) # -> 引数1 : test, 引数2 : 39

"""
位置引数
→ 呼び出し側で指定した引数の値が順番に関数側で引数のところに定義した変数に順番に代入する形式

キーワード引数
→ 関数を呼び出す側でどの仮引数にどの値を渡すのかを 「仮引数の名前=値」 の形で指定する形式
  (どの仮引数に値を入れるかを直接指定するため、引数を記述する順番は自由)
  
  ex.) keyword_arg(arg2=39, arg1='test') のように記述してもよい
"""
####################